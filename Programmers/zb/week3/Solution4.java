package Programmers.zb.week3;

class Solution {

    public int findAnswer(int n, int i, int j, int snum, int si, int sj) {

        // 해당하는 사분면 구하기
        int quadrant;

        if(i <= si+(n-1)/2) {
            if(j < sj-(n-1)/2) {
                sj -= (n-1)/2;
                quadrant = 1;
            } else {
                quadrant = 0;
            }
        } else {    
            si += (n-1)/2 + 1;
            if(j < sj-(n-1)/2) {
                sj -= (n-1)/2+1;
                quadrant = 2;
            } else {
                quadrant = 3;
            }
        }

        // 그 사분면의 첫번째 숫자 구하기
        snum += n*n*quadrant/4;
        if(si == i && sj == j) return snum;
        return findAnswer(n/2, i, j, snum, si, sj);
    }

    public int solution(int n, int i, int j) {        
        return findAnswer(n, i, j, 1, 0, n-1);
    }
}

/*
    무조건 n*n
    그 사각형의 첫번째 숫자(오른쪽 위)를 알면 그 숫자를 알 수 있다.
    재귀
    n = 2 가 아니면
    계속 해서 첫번째 숫자를 알아내기
    - 어떤 사분면인지 알아내기
    - 그 사분면의 첫번째 숫자 알아내기
        -> 넘겨줄 값 : 사이즈, 첫번째 숫자(오른쪽 위)
    
    사분면
    (0, 0) ... (0, (n-1)/2) (0, (n-1)/2+1) ... (0, n-1)
     ... ... ... ... ... ...
    ((n-1)/2, 0) ... ((n-1)/2, (n-1)/2)((n-1)/2, (n-1)/2+1) ... ((n-1)/2, n-1)
    ((n-1)/2+1, 0) ... () () ... ()
     ... ... ... ... ... ...
    (n-1, 0) ... ()() ... (n-1, n-1)

    1 : i - 0 ~ (n-1)/2, j - (n-1)/2+1 ~ n-1
    2 : i - 0 ~ (n-1)/2, j - 0 ~ (n-1)/2
    3 : i - (n-1)/2+1 ~ n-1, j - 0 ~ (n-1)/2
    4 : i - (n-1)/2+1 ~ n-1, j - (n-1)/2+1 ~ n-1

    00 01 02 03 04 05 06 07
    10 11 12 13 14 15 16 17
    20 21 22 23 24 25 26 27
    30 31 32 33 34 35 36 37
    40 41 42 43 44 45 46 47
    50 51 52 53 54 55 56 57
    60 61 62 63 64 65 66 67
    70 71 72 73 74 75 76 77

    8, (5, 2), 1(오른쪽 위 숫자), (0, 7)(오른쪽 위 위치)
    4, (5, 2), 33, (4, 3)
    2, (5, 2), 33, (4, 3)
    35

    사분면 quadrant 0123
    첫번째 숫자 (n*n/4)*(quadrant)

    시간복잡도?
    512 = 2^9
    최대 9번 들어가면 됨

    근데 이제 계속 오른쪽 위에 잇는 숫자를 전해주기 때문에 각 재귀 단계 안에서 
    오른쪽 위의 좌표를 기준으로 계산해야 함
    i, j, si, sj

    런타임 에러남
*/
